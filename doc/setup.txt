Register Drone as a github application at
https://github.com/settings/applications/new

Follow this example
http://readme.drone.io/admin/setup-github/

Application name: Drone-test
Homepage URL: http://192.168.33.10
Authorization callback URL: http://192.168.33.10/authorize

cd /vagrant/server

source setup_env.sh

docker-compose up

See instructions here on creating .drone.yml
https://www.digitalocean.com/community/tutorials/how-to-perform-continuous-integration-testing-with-drone-io-on-coreos-and-docker

Setup drone cli
cd ~
curl http://downloads.drone.io/release/linux/amd64/drone.tar.gz | tar zx
sudo install -t /usr/local/bin drone

# authorize CLI
export DRONE_SERVER=http://localhost/
export DRONE_TOKEN=...

# check CLI setup
drone info

# list all repos
dorne repo ls

# build a repo
drone build start gavinln/pyswagger-test 1  # build number

Setup Drone and Gogs as shown here
https://discuss.drone.io/t/running-gogs-and-drone-with-docker-compose/173
https://github.com/james-bowman/blog/blob/master/content/post/run-your-own-private-cd-pipeline-with-gogs-drone-and-docker.md
http://www.jamesbowman.me/post/socratic-questions/

Setup Gogs
https://github.com/gogits/gogs/tree/master/docker

# Create local directory for volume.
sudo mkdir -p /var/gogs

Start tmux
tmux

# Use `docker run` for the first time.
docker run --name=gogs -p 10022:22 -p 10080:3000 -v /var/gogs:/data gogs/gogs:0.10.8

# Use `docker start` if you have stopped it.
docker start gogs

open a browser to http://192.168.33.10:10080/

Change the Database Type to SQLite3
Change the Domain to 192.168.33.10
Change the SSH Port to 10022
Do not select Builtin SSH Server
Change the Application URL to http://192.168.33.10:10080/

Sign up for an account

Connect to VM using ssh-vm.bat and agent forwarding is enabled

Clone from Gogs
git clone ssh://git@localhost:10022/gavinln/drone-vm.git

Setup a remote called gogs for an existing project
git remote add gogs ssh://git@192.168.33.10:10022/gavinln/scikit-vm.git
